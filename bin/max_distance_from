#!/usr/bin/env ruby

require 'thread'
require 'facter'
require_relative '../lib/word_transform'

WORDS = File.read('/usr/share/dict/words').to_s.split("\n").map(&:downcase).uniq.freeze
NO_OF_CPUS = Facter.value('processors')['count']

print 'Enter source word: '
source = gets.chomp
puts "Finding words that are reachable from #{source}..."

puts "Detected #{NO_OF_CPUS} CPU cores available for parallelisation"

print "Enter parallelisation factor: "
parallelisation_factor = gets.chomp.to_i
puts "Running #{parallelisation_factor} workers..."

def calculate_group(words, word_group, source)
  pid = Process.fork do
    puts "Process starting from [#{word_group[0]}]..."

    dictionary = WordTransform::Dictionary.new(WORDS)
    word_group.shuffle.each do |target|
      distance = dictionary.path(source, target)
      puts "[#{distance}]\t#{target}" if distance
    end
  end

  pid || Process.exit(0)
end

def compute_max_distance_from(source, parallelisation: 1)
  words_of_same_size = WORDS.select { |word| word.size == source.size }
  pids = words_of_same_size.
    each_slice((words_of_same_size.count.to_f / parallelisation).ceil).
    map do |word_group|
      calculate_group(words_of_same_size, word_group, source)
    end

  pids.each { |pid| Process.wait(pid) }
end

compute_max_distance_from(source, parallelisation: parallelisation_factor)

puts 'Done!'
